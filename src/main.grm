(* Sample interactive calculator for ML-Yacc *)

fun lookup "bogus" = 10000
  | lookup s = 0

%%

%eop EOF

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%term FN | ARROW | LET | VAL | ASSIGN | REC | IF | THEN | ELSE |
      OPAREN | CPAREN | EOF | ID of string | NUM of int |
      PLUS | SUB | DIV | TIMES | GT | LT | SEMI | APPLICATION | LAMBDA

%left APPLICATION
%left LAMBDA
%left ELSE FN
%left PLUS SUB TIMES DIV LT GT 
%right IF ASSIGN ID OPAREN NUM

%nonterm EXPLIST of Ast.expr list | EXP of Ast.expr | PROG of Ast.expr

%name Main

%verbose
%%

(* the parser returns the value associated with the expression *)
PROG:
  EXP EOF (EXP)

EXP : 
  FN ID ARROW EXP %prec LAMBDA (Ast.Lam (ID, EXP))
  | EXP EXP %prec APPLICATION (Ast.App (EXP1, EXP2))
  | OPAREN EXPLIST CPAREN (List.last EXPLIST)
  | NUM  (Ast.Lit NUM)
  | EXP PLUS EXP (Ast.Prim (Ast.Add,  EXP1, EXP2))
  | EXP TIMES EXP (Ast.Prim (Ast.Add,  EXP1, EXP2))
  | EXP DIV EXP (Ast.Prim (Ast.Add,  EXP1, EXP2))
  | EXP SUB EXP (Ast.Prim (Ast.Add,  EXP1, EXP2))

  | EXP GT EXP (Ast.Prim (Ast.Gt,  EXP1, EXP2))
  | EXP LT EXP (Ast.Prim (Ast.Lt,  EXP1, EXP2))
  | EXP ASSIGN EXP (Ast.Prim (Ast.Eq, EXP1, EXP2))

  | IF EXP THEN EXP ELSE EXP (Ast.If(EXP1, EXP2, EXP3))

  | ID (Ast.Var ID)

EXPLIST :
  EXP SEMI EXPLIST (EXP :: EXPLIST) 
  | EXP ([EXP])

