(* Sample interactive calculator for ML-Yacc *)

%%

%eop EOF

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%term FN | ARROW | LET | IN | END | VAL | ASSIGN | REC | IF | THEN | ELSE |
      OPAREN | CPAREN | EOF | ID of string | NUM of int |
      PLUS | SUB | DIV | TIMES | GT | LT | AND | OR | SEMI | APPLICATION | LAMBDA |  ASSIGNMENT

%left APPLICATION
%left LAMBDA
%left ELSE FN
%right IF ASSIGNMENT ID OPAREN NUM

%left AND
%left OR
%left PLUS SUB 
%left TIMES DIV
%left LT GT ASSIGN

%nonterm DEC of Ast.dec | DECLIST of Ast.dec list | EXPLIST of Ast.expr list 
  | EXP of Ast.expr | PROG of Ast.dec list | OPER of Ast.expr | APP of Ast.expr
  | NONAPP of Ast.expr

%name Main

%noshift EOF
%verbose
%%

(* the parser returns the value associated with the expression *)
PROG:
  DECLIST EOF (DECLIST)

DEC :
  VAL ID ASSIGN EXP %prec ASSIGNMENT  (Ast.Val(ID, EXP))
  | VAL REC ID ASSIGN EXP %prec ASSIGNMENT (Ast.ValRec(ID, EXP))

DECLIST :
  DEC DECLIST (DEC :: DECLIST)
  | DEC ([DEC])

EXP : 
  NONAPP (NONAPP)
  | APP (APP)
  | OPER (OPER)
  | FN ID ARROW EXP %prec LAMBDA (Ast.Lam (ID, EXP))
  | IF EXP THEN EXP ELSE EXP (Ast.If(EXP1, EXP2, EXP3))
  | LET DECLIST IN EXP END (Ast.Let(DECLIST, EXP))

APP:
  APP NONAPP (Ast.App(APP, NONAPP))
  | NONAPP NONAPP (Ast.App(NONAPP1, NONAPP2))

NONAPP :
  ID (Ast.Var ID)
  | NUM  (Ast.Lit NUM)
  | OPAREN EXPLIST CPAREN (List.last EXPLIST)


OPER:
  EXP PLUS EXP (Ast.Prim (Ast.Add,  EXP1, EXP2))
  | EXP TIMES EXP (Ast.Prim (Ast.Mul,  EXP1, EXP2))
  | EXP DIV EXP (Ast.Prim (Ast.Div,  EXP1, EXP2))
  | EXP SUB EXP (Ast.Prim (Ast.Sub,  EXP1, EXP2))

  | EXP AND EXP (Ast.Prim (Ast.And,  EXP1, EXP2))
  | EXP OR EXP (Ast.Prim (Ast.Or,  EXP1, EXP2))

  | EXP GT EXP (Ast.Prim (Ast.Gt,  EXP1, EXP2))
  | EXP LT EXP (Ast.Prim (Ast.Lt,  EXP1, EXP2))
  | EXP ASSIGN EXP  (Ast.Prim (Ast.Eq, EXP1, EXP2))
  

EXPLIST :
  EXP SEMI EXPLIST (EXP :: EXPLIST) 
  | EXP ([EXP])
